<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Personal Blog</title>
  
  <subtitle>随性写博客，一生爱自由</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-03T08:19:33.318Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>沈春龙</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IO流</title>
    <link href="http://yoursite.com/2020/02/02/IO%E6%B5%81/"/>
    <id>http://yoursite.com/2020/02/02/IO%E6%B5%81/</id>
    <published>2020-02-02T13:51:26.000Z</published>
    <updated>2020-02-03T08:19:33.318Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近系统的学习了一下JAVA里面的IO流，IO流是Java的重要特性，通过IO流可以很好的支持网络传输，这就是为什么说Java是为互联网而生的。</p><a id="more"></a><h2 id="一，File类"><a href="#一，File类" class="headerlink" title="一，File类"></a>一，File类</h2><p>要想了解IO流首先的学习file类：</p><p>1.file类定义</p><blockquote><ol><li>java.io.file类是专门对文件进行操作的类，只能对文件本身进行操作，不能对文件内容进行操作。</li><li>File类是“文件和目录路径名的抽象表示”，而不是指文件内容（IO）。</li></ol></blockquote><p>2.file类的构造方法与常用方法</p><table><thead><tr><th>构造方法</th></tr></thead><tbody><tr><td><code>File(String parent, String child)</code>从父路径名字符串和子路径名字符串创建新的 <code>File</code>实例。</td></tr><tr><td><code>File(URI uri)</code>通过将给定的 <code>file:</code> URI转换为抽象路径名来创建新的 <code>File</code>实例。</td></tr><tr><td><code>File(String pathname)</code>通过将给定的路径名字符串转换为抽象路径名来创建新的 <code>File</code>实例。</td></tr></tbody></table><table><thead><tr><th align="left">Modifier and Type</th><th align="left">Method and Description</th></tr></thead><tbody><tr><td align="left"><code>boolean</code></td><td align="left"><code>canRead()</code>测试应用程序是否可以读取由此抽象路径名表示的文件。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>canWrite()</code>测试应用程序是否可以修改由此抽象路径名表示的文件。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>createNewFile()</code>当且仅当具有该名称的文件尚不存在时，原子地创建一个由该抽象路径名命名的新的空文件。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>delete()</code>删除由此抽象路径名表示的文件或目录。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>exists()</code>测试此抽象路径名表示的文件或目录是否存在。</td></tr><tr><td align="left"><code>File</code></td><td align="left"><code>getAbsoluteFile()</code>返回此抽象路径名的绝对形式。</td></tr><tr><td align="left"><code>String</code></td><td align="left"><code>getName()</code>返回由此抽象路径名表示的文件或目录的名称。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>isDirectory()</code>测试此抽象路径名表示的文件是否为目录。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>isFile()</code>测试此抽象路径名表示的文件是否为普通文件。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>isHidden()</code>测试此抽象路径名命名的文件是否为隐藏文件。</td></tr><tr><td align="left"><code>long</code></td><td align="left"><code>lastModified()</code>返回此抽象路径名表示的文件上次修改的时间。</td></tr><tr><td align="left"><code>long</code></td><td align="left"><code>length()</code>返回由此抽象路径名表示的文件的长度。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>mkdir()</code>创建由此抽象路径名命名的目录。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>mkdirs()</code>创建由此抽象路径名命名的目录，包括任何必需但不存在的父目录。</td></tr><tr><td align="left"><code>String[]</code></td><td align="left"><code>list()</code>返回一个字符串数组，命名由此抽象路径名表示的目录中的文件和目录。</td></tr></tbody></table><h2 id="二、IO流"><a href="#二、IO流" class="headerlink" title="二、IO流"></a>二、IO流</h2><h3 id="2-1流的概念："><a href="#2-1流的概念：" class="headerlink" title="2.1流的概念："></a>2.1流的概念：</h3><p>　　流是一组有顺序的,有起点和终点的字节集合,是对数据传输的总称或抽象。即数据在两设备间的传输称为流。流的本质是数据传输,根据数据传输特性将流抽象为各种类,方便更直观的进行数据操作。</p><h3 id="2-2IO流的分类"><a href="#2-2IO流的分类" class="headerlink" title="2.2IO流的分类:"></a>2.2IO流的分类:</h3><p>　　根据处理数据类型的不同分为:字节流（二进制，可以处理一切文件，文本，音频等）和字符流（文本文件，只能是纯文本，像txt）。</p><p>　　根据数据流向不同分为:输入流和输出流。</p><p><img src="http://free-cn-01.cdn.bilnn.com/ddimg/jfs/t1/100085/18/11702/185889/5e36f502Eb06da8c9/bebe4f0662aac591.png" alt=""></p><h2 id="三、字节流"><a href="#三、字节流" class="headerlink" title="三、字节流"></a>三、字节流</h2><h3 id="3-1字节输入流OutputStream"><a href="#3-1字节输入流OutputStream" class="headerlink" title="3.1字节输入流OutputStream"></a>3.1字节输入流OutputStream</h3><p>　　OutputStream此抽象类，是表示字节输出流的所有类的超类。操作的数据都是字节，定义了输出字节流的基本共性和方法。</p><blockquote><p>常用方法</p></blockquote><table><thead><tr><th align="left">Modifier and Type</th><th align="left">Method and Description</th></tr></thead><tbody><tr><td align="left"><code>void</code></td><td align="left"><code>close()</code>关闭此输出流并释放与此流相关联的任何系统资源。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>flush()</code>刷新此输出流并强制任何缓冲的输出字节被写出。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>write(byte[] b)</code>将 <code>b.length</code>字节从指定的字节数组写入此输出流。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>write(byte[] b, int off, int len)</code>从指定的字节数组写入 <code>len</code>个字节，从偏移 <code>off</code>开始输出到此输出流。</td></tr><tr><td align="left"><code>abstract void</code></td><td align="left"><code>write(int b)</code>将指定的字节写入此输出流。</td></tr></tbody></table><h3 id="3-2字节输出流InputStream"><a href="#3-2字节输出流InputStream" class="headerlink" title="3.2字节输出流InputStream"></a>3.2字节输出流InputStream</h3><p>　　InputStream此抽象类，是字节输入流的所有类的超类。定义了字节输入流的基本共性功能方法。</p><blockquote><p>常用方法</p></blockquote><table><thead><tr><th align="left">Modifier and Type</th><th align="left">Method and Description</th></tr></thead><tbody><tr><td align="left"><code>int</code></td><td align="left"><code>available()</code>返回从该输入流中可以读取（或跳过）的字节数的估计值，而不会被下一次调用此输入流的方法阻塞。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>close()</code>关闭此输入流并释放与流相关联的任何系统资源。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>mark(int readlimit)</code>标记此输入流中的当前位置。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>markSupported()</code>测试这个输入流是否支持 <code>mark</code>和 <code>reset</code>方法。</td></tr><tr><td align="left"><code>abstract int</code></td><td align="left"><code>read()</code>从输入流读取数据的下一个字节。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>read(byte[] b)</code>从输入流读取一些字节数，并将它们存储到缓冲区 <code>b</code> 。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>read(byte[] b, int off, int len)</code>从输入流读取最多 <code>len</code>字节的数据到一个字节数组。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>reset()</code>将此流重新定位到上次在此输入流上调用 <code>mark</code>方法时的位置。</td></tr><tr><td align="left"><code>long</code></td><td align="left"><code>skip(long n)</code>跳过并丢弃来自此输入流的 <code>n</code>字节数据。</td></tr></tbody></table><h2 id="四、字符流"><a href="#四、字符流" class="headerlink" title="四、字符流"></a>四、字符流</h2><h3 id="4-1读取字符流Reader"><a href="#4-1读取字符流Reader" class="headerlink" title="4.1读取字符流Reader"></a>4.1读取字符流Reader</h3><p>　　用于读取字符流的抽象类。 子类必须实现的唯一方法是read（char []，int，int）和close（）。 然而，大多数子类将覆盖这里定义的一些方法，以便提供更高的效率，附加的功能或两者。</p><blockquote><p>构造方法</p></blockquote><table><thead><tr><th align="left">Modifier</th><th align="left">Constructor and Description</th></tr></thead><tbody><tr><td align="left"><code>protected</code></td><td align="left"><code>Reader()</code>创建一个新的字符流阅读器，其关键部分将在阅读器本身上同步。</td></tr><tr><td align="left"><code>protected</code></td><td align="left"><code>Reader(Object lock)</code>创建一个新的字符流阅读器，其关键部分将在给定对象上同步。</td></tr></tbody></table><blockquote><p>常用方法</p></blockquote><table><thead><tr><th align="left">Modifier and Type</th><th align="left">Method and Description</th></tr></thead><tbody><tr><td align="left"><code>abstract void</code></td><td align="left"><code>close()</code>关闭流并释放与之相关联的任何系统资源。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>mark(int readAheadLimit)</code>标记流中的当前位置。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>markSupported()</code>告诉这个流是否支持mark（）操作。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>read()</code>读一个字符</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>read(char[] cbuf)</code>将字符读入数组。</td></tr><tr><td align="left"><code>abstract int</code></td><td align="left"><code>read(char[] cbuf, int off, int len)</code>将字符读入数组的一部分。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>read(CharBuffer target)</code>尝试将字符读入指定的字符缓冲区。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>ready()</code>告诉这个流是否准备好被读取。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>reset()</code>重置流。</td></tr><tr><td align="left"><code>long</code></td><td align="left"><code>skip(long n)</code>跳过字符</td></tr></tbody></table><h3 id="4-2写入字符流流Write"><a href="#4-2写入字符流流Write" class="headerlink" title="4.2写入字符流流Write"></a>4.2写入字符流流Write</h3><p>　　用于写入字符流的抽象类。 子类必须实现的唯一方法是write（char []，int，int），flush（）和close（）。 然而，大多数子类将覆盖这里定义的一些方法，以便提供更高的效率，附加的功能或两者。</p><blockquote><p>构造方法</p></blockquote><table><thead><tr><th align="left">Modifier</th><th align="left">Constructor and Description</th></tr></thead><tbody><tr><td align="left"><code>protected</code></td><td align="left"><code>Writer()</code>创建一个新的人物流作家，其关键部分将在作者本身上同步。</td></tr><tr><td align="left"><code>protected</code></td><td align="left"><code>Writer(Object lock)</code>创建一个新的字符流写入器，其关键部分将在给定对象上进行同步。</td></tr></tbody></table><blockquote><p>常用方法</p></blockquote><table><thead><tr><th align="left">Modifier and Type</th><th align="left">Method and Description</th></tr></thead><tbody><tr><td align="left"><code>Writer</code></td><td align="left"><code>append(char c)</code>将指定的字符附加到此作者。</td></tr><tr><td align="left"><code>Writer</code></td><td align="left"><code>append(CharSequence csq)</code>将指定的字符序列附加到此作者。</td></tr><tr><td align="left"><code>Writer</code></td><td align="left"><code>append(CharSequence csq, int start, int end)</code>将指定字符序列的子序列附加到此作者。</td></tr><tr><td align="left"><code>abstract void</code></td><td align="left"><code>close()</code>关闭流，先刷新。</td></tr><tr><td align="left"><code>abstract void</code></td><td align="left"><code>flush()</code>刷新流。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>write(char[] cbuf)</code>写入一个字符数组。</td></tr><tr><td align="left"><code>abstract void</code></td><td align="left"><code>write(char[] cbuf, int off, int len)</code>写入字符数组的一部分。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>write(int c)</code>写一个字符</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>write(String str)</code>写一个字符串</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>write(String str, int off, int len)</code>写一个字符串的一部分。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近系统的学习了一下JAVA里面的IO流，IO流是Java的重要特性，通过IO流可以很好的支持网络传输，这就是为什么说Java是为互联网而生的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java学习" scheme="http://yoursite.com/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="-IO流" scheme="http://yoursite.com/tags/IO%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>20184350135 沈春龙 作业六</title>
    <link href="http://yoursite.com/2020/02/01/20184350135%20%E6%B2%88%E6%98%A5%E9%BE%99%20%E4%BD%9C%E4%B8%9A%E5%85%AD/"/>
    <id>http://yoursite.com/2020/02/01/20184350135%20%E6%B2%88%E6%98%A5%E9%BE%99%20%E4%BD%9C%E4%B8%9A%E5%85%AD/</id>
    <published>2020-02-01T11:41:49.146Z</published>
    <updated>2020-02-01T11:45:06.017Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Files.lines(Paths.get(<span class="string">"D://JAVAcode//老九学堂\\src//Collection/Stop_Words.txt"</span>))</span><br><span class="line">          .flatMap(x-&gt; Stream.of(x.replaceAll(<span class="string">"[^a-zA-Z']"</span>, <span class="string">" "</span>).replaceAll(<span class="string">" +"</span>,<span class="string">" "</span>).split(<span class="string">" "</span>)))</span><br><span class="line">          .collect(Collectors.toList()));</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;(Files.lines(Paths.get(<span class="string">"D://JAVAcode//老九学堂\\src//Collection/work.txt"</span>))</span><br><span class="line"> .flatMap(x-&gt; Stream.of(x.replaceAll(<span class="string">"[^a-zA-Z']"</span>, <span class="string">" "</span>).replaceAll(<span class="string">" +"</span>,<span class="string">" "</span>).split(<span class="string">" "</span>)))</span><br><span class="line">         .filter(x-&gt;!list.contains(x))</span><br><span class="line">         .collect(Collectors.toList()));</span><br><span class="line">Files.write(Paths.get(<span class="string">"D://JAVAcode//老九学堂\\\\src//Collection/Words.txt"</span>), list2, Charset.forName(<span class="string">"utf-8"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2020/02/01/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/02/01/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-02-01T07:26:35.000Z</published>
    <updated>2020-02-18T07:29:32.229Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>正则表达式</strong>(<em>Regular Expression</em>)可以看作是一门独立的用来处理文本的<strong>小语言</strong>。它描述了一个规则，通过这个规则可以匹配一类字符串。使用正则表达式可以极大的提高我们处理文本的效率，并减少代码量。</p><a id="more"></a><p>[TOC]</p><h3 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h3><p>字母，数字，汉字，下划线，以及没有特殊定义的标点符号，都是”<strong>普通字符</strong>“。表达式中的普通字符，在匹配一个字符串的时候，<strong>匹配与之相同的一个字符</strong>。</p><h3 id="简单转义字符"><a href="#简单转义字符" class="headerlink" title="简单转义字符"></a>简单转义字符</h3><table><thead><tr><th>表达式</th><th>作用</th></tr></thead><tbody><tr><td><code>\n</code></td><td>代表换行符</td></tr><tr><td><code>\t</code></td><td>制表符</td></tr><tr><td><code>\\</code></td><td>代表\本身</td></tr><tr><td><code>\^</code>,<code>\$</code>,<code>\.</code>,<code>\(</code>,<code>\)</code>,<code>\{</code>,<code>\}</code>,<code>\?</code>,<code>\+</code>,<code>\*</code>,<code>|</code>,<code>\[</code>,<code>\]</code></td><td>匹配这些字符本身</td></tr></tbody></table><h3 id="标志字符集"><a href="#标志字符集" class="headerlink" title="标志字符集"></a>标志字符集</h3><blockquote><p>能够与“<strong>多种字符</strong>”匹配的表达式</p><p>注意区分大小写，<strong>大写是相反的意思</strong></p></blockquote><table><thead><tr><th>表达式</th><th>作用</th></tr></thead><tbody><tr><td><code>\d</code></td><td>任意一个数字，<code>0~9</code>中的任意一个</td></tr><tr><td><code>\w</code></td><td>任意一个字母或数字下划线，也就是<code>A~Z</code>，<code>a~z</code>，<code>0~9</code>,</td></tr><tr><td><code>\s</code></td><td>包括空格、制表符、换行符、登空白字符的其中任意一个</td></tr><tr><td><code>.</code></td><td>小数点可以匹配任意一个字符如果要匹配包括“\n”在内的所有字符，一般用<code>[\s\S]</code></td></tr></tbody></table><h3 id="自定义字符集合"><a href="#自定义字符集合" class="headerlink" title="自定义字符集合"></a>自定义字符集合</h3><table><thead><tr><th>表达式</th><th>作用</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><table><thead><tr><th>表达式</th><th>作用</th></tr></thead><tbody><tr><td><code>{n}</code></td><td>表达式重复n次</td></tr><tr><td><code>{m,n}</code></td><td>表达式至少重复m次，最多重复n次</td></tr><tr><td><code>{m,}</code></td><td>表达式至少重复m次</td></tr><tr><td><code>?</code></td><td>匹配表达式0次或者1次，相当于{0,1}</td></tr><tr><td><code>+</code></td><td>表达式至少出现1次，相当与{1,}</td></tr><tr><td><code>*</code></td><td>表达式不出现或出现任意次，相当与{0,}</td></tr></tbody></table><h3 id="字符边界"><a href="#字符边界" class="headerlink" title="字符边界"></a>字符边界</h3><table><thead><tr><th>表达式</th><th>作用</th></tr></thead><tbody><tr><td><code>^</code></td><td>与字符串开始的地方匹配</td></tr><tr><td><code>$</code></td><td>与字符串结束的地方匹配</td></tr><tr><td><code>\b</code></td><td>匹配一个单词边界</td></tr></tbody></table><h3 id="选择符和分组"><a href="#选择符和分组" class="headerlink" title="选择符和分组"></a>选择符和分组</h3><table><thead><tr><th>表达式</th><th>作用</th></tr></thead><tbody><tr><td>`</td><td>`分支结构</td></tr><tr><td><code>()</code> 捕获组</td><td></td></tr><tr><td><code>(?:Expression)</code> 非捕获组</td><td></td></tr></tbody></table><h2 id="1-1计算机网络"><a href="#1-1计算机网络" class="headerlink" title="1.1计算机网络"></a>1.1计算机网络</h2><p>　　定义：由<strong>通信信道</strong>连接的<strong>主机</strong>和<strong>网络设备</strong>的集合，以方便用户<strong>共享资源</strong>和<strong>相互通信</strong><br>　　主要特征：”通用性”</p><h2 id="1-2因特网的结构"><a href="#1-2因特网的结构" class="headerlink" title="1.2因特网的结构"></a>1.2因特网的结构</h2><h2 id="1-3协议分层与服务模型"><a href="#1-3协议分层与服务模型" class="headerlink" title="1.3协议分层与服务模型"></a>1.3协议分层与服务模型</h2><h2 id="1-4分组交换网的性能指标"><a href="#1-4分组交换网的性能指标" class="headerlink" title="1.4分组交换网的性能指标"></a>1.4分组交换网的性能指标</h2><h2 id="1-5计算机网络简史"><a href="#1-5计算机网络简史" class="headerlink" title="1.5计算机网络简史"></a>1.5计算机网络简史</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;正则表达式&lt;/strong&gt;(&lt;em&gt;Regular Expression&lt;/em&gt;)可以看作是一门独立的用来处理文本的&lt;strong&gt;小语言&lt;/strong&gt;。它描述了一个规则，通过这个规则可以匹配一类字符串。使用正则表达式可以极大的提高我们处理文本的效率，并减少代码量。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java学习" scheme="http://yoursite.com/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="-正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>流式编程</title>
    <link href="http://yoursite.com/2020/01/30/%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/01/30/%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B/</id>
    <published>2020-01-30T03:40:27.778Z</published>
    <updated>2020-02-01T07:48:36.249Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>title: 流式编程<br>date: 2020-01-30 11:40:27<br>tags:</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>20184350135 沈春龙 作业四</title>
    <link href="http://yoursite.com/2020/01/29/20184350135%20%E6%B2%88%E6%98%A5%E9%BE%99%20%E4%BD%9C%E4%B8%9A%E5%9B%9B/"/>
    <id>http://yoursite.com/2020/01/29/20184350135%20%E6%B2%88%E6%98%A5%E9%BE%99%20%E4%BD%9C%E4%B8%9A%E5%9B%9B/</id>
    <published>2020-01-29T10:57:22.259Z</published>
    <updated>2020-01-29T11:19:36.143Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>第一题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Stream_API;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharCout</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mian</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str = <span class="string">"Your。future：depends#@￥on your dreams,so go to sleep."</span>;</span><br><span class="line">Stream.of(str.replaceAll(<span class="string">"[^a-zA-Z]"</span>, <span class="string">""</span>).split(<span class="string">""</span>)).collect(Collectors.groupingBy(x-&gt; x)).forEach((a,b)-&gt;  System.out.println(a+<span class="string">"="</span>+b.size()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">InputStream inputStream = WordCount.class.getResourceAsStream("work.txt");</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line"></span><br><span class="line">br.lines().flatMap(x-&gt; Stream.of(x.replaceAll(<span class="string">"\\pP"</span>, <span class="string">" "</span>).split(<span class="string">" "</span>))).map(String::toLowerCase).filter(x-&gt;x!=<span class="string">"a"</span>||x!=<span class="string">"the"</span>).distinct().sorted().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>函数式编程</title>
    <link href="http://yoursite.com/2020/01/26/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/01/26/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</id>
    <published>2020-01-26T09:34:40.000Z</published>
    <updated>2020-01-27T16:39:06.430Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>　　函数式编程是一种编程方式，它将电脑运算视为函数的计算。函数编程语言最重要的基础是λ演算（lambda calculus），而且λ演算的函数可以接受函数当作输入（参数）和输出（返回值）。简单说，”函数式编程”是一种<a href="http://en.wikipedia.org/wiki/Programming_paradigm" target="_blank" rel="noopener">“编程范式”</a>（programming paradigm），也就是如何编写程序的方法论。它属于<a href="http://en.wikipedia.org/wiki/Structured_programming" target="_blank" rel="noopener">“结构化编程”</a>的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用。</p><a id="more"></a><p>(看完下面这个视频给你一个大概的印象)</p><iframe src="//player.bilibili.com/player.html?aid=85231547&cid=145705796&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>咱们先不管哪些啥定义的，先了解函数式编程到底怎么用呢？下面给出一个面试题：<blockquote><p>统计文本中的单词个数，请用尽可能简练的代码使用Java语言来实现，形式如下：</p></blockquote><img src="http://free-cn-01.cdn.bilnn.com/ddimg/jfs/t1/96954/38/11220/23325/5e2ee9e4E831594ca/cede047e902cd3be.png" style="zoom: 80%;" /><p>一般我们的传统思维就是写出下面这种编程风格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">InputStream inputStream = WordCount.class.getResourceAsStream("work.txt");</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">String line=<span class="string">""</span>;</span><br><span class="line">Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((line=br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">String[] split = line.split(<span class="string">" "</span>);</span><br><span class="line">initResult(map, split[<span class="number">0</span>]);</span><br><span class="line">initResult(map, split[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initResult</span><span class="params">(Map&lt;String, Integer&gt; result, String key)</span> </span>&#123;</span><br><span class="line">Integer value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(result.containsKey(key)) &#123;</span><br><span class="line">value = result.get(key) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">result.put(key,value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;　　函数式编程是一种编程方式，它将电脑运算视为函数的计算。函数编程语言最重要的基础是λ演算（lambda calculus），而且λ演算的函数可以接受函数当作输入（参数）和输出（返回值）。简单说，”函数式编程”是一种&lt;a href=&quot;http://en.wikipedia.org/wiki/Programming_paradigm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;“编程范式”&lt;/a&gt;（programming paradigm），也就是如何编写程序的方法论。它属于&lt;a href=&quot;http://en.wikipedia.org/wiki/Structured_programming&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;“结构化编程”&lt;/a&gt;的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java学习————作业三（寒假）</title>
    <link href="http://yoursite.com/2020/01/18/Java%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94%E4%BD%9C%E4%B8%9A%E4%B8%89%EF%BC%88%E5%AF%92%E5%81%87%EF%BC%89/"/>
    <id>http://yoursite.com/2020/01/18/Java%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E2%80%94%E4%BD%9C%E4%B8%9A%E4%B8%89%EF%BC%88%E5%AF%92%E5%81%87%EF%BC%89/</id>
    <published>2020-01-18T11:03:37.000Z</published>
    <updated>2020-01-26T11:21:14.980Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>set,list,queue集合的使用</p><a id="more"></a><p>第一题：</p><p>Queue通常用于操作存储一组队列方式的对象信息 ，一般存储方式为先进先出。</p><p>其几种特殊方法：</p><ul><li>Booleanoffer（element）   向队列中插入一个元素（类似add方法）。</li><li>E poll()    获取并删除队列头元素。为空则返回null。</li><li>E remove()   获取并删除队列头元素，为空则返回异常。</li><li>E peek()   获取但不删除列头元素，如果队列为空返回null。</li><li>E element()   获取但不删除列头元素，如果队列为空抛出异常。</li></ul><p>其主要子类：</p><ul><li>DelayQueue </li><li>PriorityQueue 优先队列，最小值拥有优先级最先删除。</li><li>ArrayQueue 双端队列，集合容量可动态扩展</li><li>LinkedQueue</li><li>LinkedList</li></ul><h4 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">50</span>;</span><br><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="comment">//生成五十个不重复随机数存储到set集合</span></span><br><span class="line"><span class="keyword">while</span>(set.size()&lt;=sum) &#123;</span><br><span class="line"><span class="keyword">int</span> random = (<span class="keyword">int</span>)(Math.random()*(<span class="number">100</span>));</span><br><span class="line">set.add(random);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用迭代器遍历输出</span></span><br><span class="line">Iterator&lt;Integer&gt; it1 = set.iterator();</span><br><span class="line"><span class="keyword">while</span>(it1.hasNext()) &#123;</span><br><span class="line">System.out.print(it1.next() + <span class="string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">//三次循环删除最大值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> max = Collections.max(set);</span><br><span class="line">set.remove(max);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用foreach循环输出</span></span><br><span class="line"><span class="keyword">for</span>(Integer i : set) &#123;</span><br><span class="line">  System.out.print(i+<span class="string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200118182243336.png" alt="image-20200118182243336"></p><h4 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CharNum</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        Map&lt;Character,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = str.charAt(i);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(ch&gt;=<span class="string">'a'</span>&amp;&amp;ch&lt;=<span class="string">'z'</span>||ch&gt;=<span class="string">'A'</span>&amp;&amp;ch&lt;=<span class="string">'Z'</span>) &#123;</span><br><span class="line">            <span class="comment">//判断map集合中是否含有字母，如果有次数加1一，没有就初始化为1。</span></span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(ch)) &#123;</span><br><span class="line">                Integer num = map.get(ch);</span><br><span class="line">                map.put(ch, ++num);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(ch,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用foreach循环输出</span></span><br><span class="line">        <span class="keyword">for</span> (Character key : map.keySet()) &#123;</span><br><span class="line">        Integer value = map.get(key);</span><br><span class="line">        System.out.println(key+<span class="string">"出现了 "</span>+value+<span class="string">"次"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str = <span class="string">"Your。future：depends#@￥on your dreams,so go to sleep."</span>;</span><br><span class="line">CharNum(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;set,list,queue集合的使用&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java学习" scheme="http://yoursite.com/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="-Collection框架" scheme="http://yoursite.com/tags/Collection%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Collection框架</title>
    <link href="http://yoursite.com/2020/01/17/Collection%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2020/01/17/Collection%E6%A1%86%E6%9E%B6/</id>
    <published>2020-01-17T12:12:45.000Z</published>
    <updated>2020-01-25T06:34:03.108Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　有了数组为什么还需要集合框架? 为了适应实际开发过程中,保存动态变化的数据集合,而数组一旦定义,长度将不能变化,于是就有我么动态增长的集合框架.</p><img src="http://free-cn-01.cdn.bilnn.com/ddimg/jfs/t1/109678/12/4776/330919/5e25dd05E50232686/cf7de3f63cff3d77.jpg" alt="f7de3f63cff3d77.jpg" style="zoom: 50%;" /><a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=110 src="//music.163.com/outchain/player?type=0&id=3212307353&auto=1&height=90"></iframe><h2 id="集合框架介绍"><a href="#集合框架介绍" class="headerlink" title="集合框架介绍"></a>集合框架介绍</h2><blockquote><p>一组存储对象的容器（动态）</p></blockquote><ul><li>Collection接口：存储另一个元素的集合</li><li>Collections：操作集合的工具类</li><li>Map接口（图）：存储键/值对</li></ul><p><img src="http://free-cn-01.cdn.bilnn.com/ddimg/jfs/t1/106429/15/11149/14536/5e26f57dEd507bb53/45d0205b45e872ab.png" alt=""></p><blockquote><p>注意：集合框架中所有的具体类都实现了Cloneable和Serializabel接口，即他们的实例都是可复制且可序列化的。</p></blockquote><h2 id="Collection接口："><a href="#Collection接口：" class="headerlink" title="Collection接口："></a>Collection接口：</h2><blockquote><p>Collection接口：</p></blockquote><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">boolean add(E e);</td><td align="left">向集合中添加元素</td></tr><tr><td align="left">int size();</td><td align="left">返回集合中的元素个数</td></tr><tr><td align="left">void clear();</td><td align="left">删除集合中的所有元素</td></tr><tr><td align="left">boolean remove(Object o);</td><td align="left">从集合删除元素o</td></tr><tr><td align="left">boolean removeAll(Collection&lt;?&gt; c);</td><td align="left">从集合中删除集合c中的所有元素</td></tr><tr><td align="left">boolean retainAll(Collection&lt;?&gt; c);</td><td align="left">保留c和该集合都有的元素（交集）</td></tr><tr><td align="left">boolean addAll(Collection&lt;? extends E&gt; c);</td><td align="left">将集合c中所有元素添加到当前这个集合</td></tr><tr><td align="left">boolean contains(Object o);</td><td align="left">如果该集合包含对象o,返回true</td></tr><tr><td align="left">boolean containsAll(Collection&lt;?&gt; c);</td><td align="left">如果该集合中包含集合c中所有元素，返回true</td></tr><tr><td align="left">boolean isEmpty();</td><td align="left">如果集合不包含任何元素，则返回true</td></tr><tr><td align="left">Iterator<E> iterator();</td><td align="left">返回该集合中元素所有的迭代器</td></tr><tr><td align="left">Object[] toArray();</td><td align="left">返回该集合元素构成的Object数组</td></tr></tbody></table><blockquote><p>三种主要子接口</p></blockquote><ol><li>Set(规则类)：存储一组不重复的元素</li><li>List(线性表)：存储一个有序集合</li><li>Queue(队列)：存储用先进先出方式处理的对象</li></ol><p><img src="http://free-cn-01.cdn.bilnn.com/ddimg/jfs/t1/93364/28/11071/50049/5e26f726Eddd8eba4/e3c91e51833f020b.png" alt=""></p><blockquote><p>注意：Collection是集合最高接口，但是直接使用Collection接口会造成操作意义不明确，所以在实际开发中不直接使用Collection接口</p></blockquote><h3 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h3><blockquote><p>具有索引的List接口</p></blockquote><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public void add(int index, E element)</td><td>在指定位置增加元素</td></tr><tr><td>public boolean addAll(int index, E element)</td><td>在指定位置增加一组元素</td></tr><tr><td>E get(int index)</td><td>返回指定位置元素</td></tr><tr><td>public int indexOf(Object o)</td><td>查找指定元素的位置</td></tr><tr><td>public int lastindex Of(Object o)</td><td>从后往前查找指定元素的位置</td></tr><tr><td>public Listlterator<E> listlterator()</td><td>获得List迭代器对象(可以在指定位置向前或向后访问，可以修改集合中的元素)</td></tr><tr><td>public E remove(int index)</td><td>删除指定位置的元素</td></tr><tr><td>public List<E> subList(int fromlndex, int tolndex)</td><td>取出集合中的子集合</td></tr><tr><td>public E set(int index, E element)</td><td>替换指定位置的元素</td></tr></tbody></table><blockquote><p>List接口下的三个实现类</p></blockquote><ul><li>ArrayList –数组线性表，是一个大小可变的数组，在内存中分配连续的空间，遍历元素和随机访问元素的效率比较高。</li><li>LinkedList –链表，采用链表存储方式，提供从线性表两端提取、插入和删除元素的方法，插入、删除元素效率比较高。</li></ul><blockquote><p>List接口扩展了Collection接口的方法，这些方法使用起来比父接口更加方便，要使用List接口，需要对List接口的实现类实例化</p></blockquote><h3 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h3><blockquote><p>用来操作存储一组唯一,无序的对象    v </p></blockquote><blockquote><p>Set接口下的三个实现类</p></blockquote><ul><li>HashSet – 用来存储互不相同的任何元素</li><li>LinkedHashSet – 使用链表扩展实现HashSet类,支持对元素的排序</li><li>TreeSet – 可以确保所有元素是有序的</li></ul><h3 id="Queue接口"><a href="#Queue接口" class="headerlink" title="Queue接口"></a>Queue接口</h3><blockquote><p>通常用于操作一组队列方式的对象信息(一般存储方式为先进先出)</p></blockquote><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean offer(element)</td><td>向队列中插入一个元素(类型add方法)</td></tr><tr><td>E poll()</td><td>获取并删除队列头元素,如果队列为空返回null</td></tr><tr><td>E remove()</td><td>获取并删除队列头元素,如果队列为空抛出异常</td></tr><tr><td>E peek()</td><td>获取但不删除列头元素,如果队列为空返回null</td></tr><tr><td>E element()</td><td>获取但不删除列头头元素,如果队列为空抛出异常</td></tr></tbody></table><blockquote><p>主要实现子类</p></blockquote><ul><li>PriorityQueue 优先队列，最小值拥有优先级最先删除。</li><li>ArrayQueue 双端队列，集合容量可动态扩展</li></ul><blockquote><p>注意:</p><p>1.Deque支持在两端插入和删除元素,是双端队列的简称(double-ended queue),支持从两端操作队列的元素</p><p>2.定义的方法:addFirst(e), removeFirst(e), addLast(e), removeLast(e), getFirst()/getLast()</p></blockquote><h2 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h2><blockquote><p>以键-值存储元素的容器，根据关键字(key)找到对应的数据</p></blockquote><table><thead><tr><th align="left">方法</th><th>描述</th></tr></thead><tbody><tr><td align="left">V put(key,value)</td><td>将一个键/值映射放入图中</td></tr><tr><td align="left">V get(key)</td><td>根据键获取对应的value值</td></tr><tr><td align="left">Set<K> keySet()</td><td>返回包含键的规则集</td></tr><tr><td align="left">Collection<V> values()</td><td>返回包含值得集合</td></tr><tr><td align="left">boolean containsKey(key)</td><td>返回图中是否包含键值key</td></tr><tr><td align="left">Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</td><td>返回一个图中包含条目的规则集</td></tr><tr><td align="left">int size()</td><td>返回途中的键值对个数</td></tr><tr><td align="left">V remove(key)</td><td>删除指定键对应的条目</td></tr></tbody></table><blockquote><p>其主要子类及其用途</p></blockquote><table><thead><tr><th>子类</th><th>描述</th></tr></thead><tbody><tr><td>HashMap</td><td>查询、插入和删除比较高效</td></tr><tr><td>LinkedHashMap</td><td>支持元素的排序</td></tr><tr><td>TreeMap</td><td>遍历有序的键值时非常高效、</td></tr><tr><td>Properties</td><td>一般用于操作属性文件</td></tr></tbody></table><blockquote><p>Map三种遍历方式</p></blockquote><ul><li>通过Map.keySet遍历key,通过key取出对应的value（比较常用，需要二次取值）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(String key : treeMap.keySet())&#123;</span><br><span class="line">    System.out.println(key + <span class="string">"--"</span> + treeMap.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过Map.entrySet使用迭代器遍历key和value（不常用，代码复杂）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entrySet = treeMap.entrySet();</span><br><span class="line">Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; entrySetIt = entrySet.iterator();</span><br><span class="line"><span class="keyword">while</span>(entrySetIt.hasNext())&#123;</span><br><span class="line">    Map.Entry&lt;String, Integer&gt; entry = entrySetIt.next();</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">"--"</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>直接遍历Map.entrySet集合（容量大时，使用此方法）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Entry&lt;String, Integer&gt; entry : treeMap.entrySet())&#123;</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">"--"</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　有了数组为什么还需要集合框架? 为了适应实际开发过程中,保存动态变化的数据集合,而数组一旦定义,长度将不能变化,于是就有我么动态增长的集合框架.&lt;/p&gt;
&lt;img src=&quot;http://free-cn-01.cdn.bilnn.com/ddimg/jfs/t1/109678/12/4776/330919/5e25dd05E50232686/cf7de3f63cff3d77.jpg&quot; alt=&quot;f7de3f63cff3d77.jpg&quot; style=&quot;zoom: 50%;&quot; /&gt;
    
    </summary>
    
    
      <category term="Java学习" scheme="http://yoursite.com/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="-Collection框架" scheme="http://yoursite.com/tags/Collection%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>深度学习入门</title>
    <link href="http://yoursite.com/2020/01/16/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2020/01/16/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8/</id>
    <published>2020-01-16T08:49:19.000Z</published>
    <updated>2020-01-26T09:38:08.469Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　深度学习之神经网络结构，梯度下降算法，及反向传播。</p><a id="more"></a><hr><h2 id="神经网络和多元一次函数的联系"><a href="#神经网络和多元一次函数的联系" class="headerlink" title="神经网络和多元一次函数的联系"></a>神经网络和多元一次函数的联系</h2><p>　　我认为多元一次函数就是一种神经网络。神经网络中：输入层-&gt;处理层-&gt;输出层，就相当于多元一次函数中：多个变量x经过函数得到结果y。</p><hr><h2 id="神经网络中的可训练参数"><a href="#神经网络中的可训练参数" class="headerlink" title="神经网络中的可训练参数"></a>神经网络中的可训练参数</h2><p>权重，偏置值</p><hr><h2 id="梯度下降的优势"><a href="#梯度下降的优势" class="headerlink" title="梯度下降的优势"></a>梯度下降的优势</h2><p>　　应该是简化了计算吧。最小二乘法就是直接求多元函数极值，求偏导，让偏导为零，解方程组，当变量有非常多个元素时，其计算量就变得非常大了，梯度下降法可以看作是解该方程组的简化，它只需要一个反复迭代的式子，沿着梯度下降，就可以求出其极值。</p><hr><h2 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h2><p>　　神经网络训练就是对权重和偏执值进行调整，直到到达一个最优结果，那么最初的权重和偏执值如何设定，都从零开始？</p><p>　　看了很多遍视频，还是看不懂，所以也没啥疑惑，只有不懂。。。</p><p>　　比如如何微调参数，梯度方向如何确定等</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　深度学习之神经网络结构，梯度下降算法，及反向传播。&lt;/p&gt;
    
    </summary>
    
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="-神经网络" scheme="http://yoursite.com/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>深度学习入门</title>
    <link href="http://yoursite.com/2020/01/16/%E7%BD%91%E7%BB%9C%E5%AE%9A%E4%B9%89%E4%B8%8E%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2020/01/16/%E7%BD%91%E7%BB%9C%E5%AE%9A%E4%B9%89%E4%B8%8E%E6%A6%82%E5%BF%B5/</id>
    <published>2020-01-16T08:49:19.000Z</published>
    <updated>2020-02-18T07:34:16.923Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="-神经网络" scheme="http://yoursite.com/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://yoursite.com/2020/01/12/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2020/01/12/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-01-12T05:03:55.000Z</published>
    <updated>2020-01-23T15:26:01.470Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">请输入密码：</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="f17f4476b232d1411eef3300d4806301edfa09a1f420ec975be299c8c9874087">bd3038518599e2a4fc212d4b23763f664bc1b16651d09485d3a199eac3158c00596441bec2a397e2f7523ea26faee8915c1b2c3f57ffc939dd189b5af8a2f9976cd51c91f4f9cad63f1efb3a43edb8e2e9d51d11bdba8d54fce258319b99ef362e8feeeb7ce85f6512e21c8bab38a0c2b07566d3a1f886c6273c861fc44a54a5cd71e057d2e4e5c12e485afb25c3b6db29f082fe176f8b1f19bcf95fafd6ab0c7ae9bd3e59e1e80d2161b08d0c3d56f644f6b6d2680edac37aa35affc1835b934cb502ae38fdacb358dba47193172bee734d3a79ec72a8c71eb98fffc894cfbc6260a0431e42e057f2595aea44582e721c97c9862ace0c2f82f46077df00dcec44bdfc3c06dfc7311dfec6fb2450e9f06c62f0f70f2ea865f790f530ba7f8b392befba5a938db710ab29183c0d106a7a29eec3ff3d8c58342696c73e723c0a6d6136d6c570669911a7dc4b580b5312dd93212d49062fa07363fa274315fe3a7cf1d1bb9d5b2e328836ab52d8ef042b68f58b3846409846145b75707d05cc1b93b5ef2a6ba6f6307d5cfb6d7db8dd5089e0e34307e10d2d8b73656b7d52d7b63e182216ddd2260806f47359b1822d1d28f5cf6c42cd91e17ab99bc08212fcb8da913da1fb66c90b152ba179d04c5e9e896aa8f1487a9097966887289d61745f3c1c2f190d4bd9757ad1944facff5b439f70b33b5dcd044540a8c68ca238d11112c65757bceade4dc3d94d6aa2e08371adb345005963238dcf1bf7f8f5827350ae3270676e858bcb34521659c4a7cfdc9656bd46dff323231b72dc9b8d648f566cf9dc45ad20cc465585036b7de1530a7ee9526d2c87932e3e384a03a6dba317af97f1bf5182f08c3a18af61651e73bd74d4faae186aa2b7d642cb8aa3b29e8ee483811db4175ebffe35ca1e1bc0bdb6d0f6f5f78f2f2caa85195fbd99bde4bd2e74b482e18147001bf548fed0f6e69b95e8123d902dfa591fa9b2990cda8f4cab8425d31ffa0b684038c16a9772be27fd1a23540458fb56e46dc08b93e1a4e5a2354f998d9dc9ab03e93bb0d7faf17f4999e8653b105c2f34d7245867467ff6e28624f39da53ef31a5bf173f9dd55ef6f7c37cf2414450cf382e73e68e1cb9e7b7c933d4e6e6a25dec985bd27f12712ade716ee25248289f31bf6e9ce5c66f5f483c893e143e838af11e48c5e746845623e3894bcb3eec2cad08ac1170bae2ba90d38717781cf3552ba931595c25264697e1db0c3544b813ff930cd2d7fa616f755537838f7f837ddae8624cfdfaaef033e1359cbe1a4cd6613a8caaf390a018b071c0268c5aee7711e746cb772be36990e6e6c8597f2c087ecad62cd66bdcaf78ded75df82e64a78c472dcd53beac1db42a38286a02f3332ae01322bd00148d1842db9d0a5fa9118a10fb0d6d27a0cb5781f6f3670949b1802f90223f819a5329769425bd41466af4142ec07aacf7485070cf503bfc001970edd2f5f94d1efafd8a3b0a852a893524cfe4abeb9b519b439a7c7ff874d3e54524ed66fa884c2e80309255df11c9d698acf91f913b3e523d87264da512f34e5380d98bb6d5624c781a05f2ffb39be9895d277f2614af488613289aaa1642e4de3b2499207b92187829d04799ccda4c4e6985749d0a4aa68b95d6d00b6abb6321e58e9a7dfe951198547fd6a57a26587c5e5f9d53c3b439cab01028692c408c47b4a907cc3fb5f2a480ff9927e809d30ca9281d14b75e892a552ec63585dd0c38211b6ad3342b63674b02d808e994aa8744b29c7becaef46100b92db4dfe202b7309737e796379fa5c0e0bc861d6055d51dcbc9aa73839f80e0d736b4a1e245c01cfc998fd53e5c366740440062c790e2e01191ed40e95d7e7b48da026433b36f39c6ff454704e61895985a10665f866cf25db1850f6c6659d4e275c9e2a6ae04f8e76ceffaae287a188a44c43d3aa16a7a4050223f5ca54997527b13f6c7b7cb02d7193d589daf73b438ac1e021facacb11e51a84b3fd31789761b0d4786c65df4faa43b1dfbd2b8cff4432c9e47538af3efffd9a4079a7a6bbad109466bea71c784882e959883dd1b3195ee4573f7fce34b733b190aef1d5cf12289b0e17f46102c9d17982d127</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      本文由于不可抗拒原因进行了加密，如果你确实想看，请在本章评论区留下你的邮箱。
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="-第一篇博客" scheme="http://yoursite.com/tags/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
